# Recipe files have to perform the following tasks after including this file:
# 1) Add patches to SRC_URI. Platform-specific patches should be contained in
#    either "chromium-x11" or "chromium-wayland". There are also patches that
#    are shared amongst platforms but may one day no longer be needed. These
#    do not belong in such a subdirectory, but still need to be explicitely be
#    added.
# 2) Add md5sum and sha256sum hashes of the tarball.

include chromium.inc

DESCRIPTION = "Chromium browser"

SRC_URI = "\
        https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${PV}.tar.xz \
        file://include.gypi \
        file://oe-defaults.gypi \
        file://google-chrome \
        file://unset-madv-free.patch \
        file://0001-v8-fix-build-with-gcc7.patch \
        file://0002-WebKit-fix-build-with-gcc7.patch \
	file://0001-openh264-disable-format-security-warning.patch.patch \
	file://0002-replace-struct-ucontext-with-ucontext_t.patch \
"
SRC_URI_append_libc-musl = "\
           file://musl-support/0001-sandbox-Define-TEMP_FAILURE_RETRY-if-not-defined.patch \
           file://musl-support/0002-breakpad-Replace-__WORDSIZE-with-defines-from-limits.patch \
           file://musl-support/0003-Avoid-mallinfo-APIs-on-non-glibc-linux.patch \
           file://musl-support/0004-include-fcntl.h-for-loff_t.patch \
           file://musl-support/0005-use-off64_t-instead-of-the-internal-__off64_t.patch \
           file://musl-support/0006-linux-glibc-make-the-distinction.patch \
           file://musl-support/0007-allocator-Do-not-include-glibc_weak_symbols-for-musl.patch \
           file://musl-support/0008-Use-correct-member-name-__si_fields-from-LinuxSigInf.patch \
           file://musl-support/0009-Match-syscalls-to-match-musl.patch \
           file://musl-support/0010-Define-res_ninit-and-res_nclose-for-non-glibc-platfo.patch \
           file://musl-support/0011-Do-not-define-__sbrk-on-musl.patch \
           file://musl-support/0012-Adjust-default-pthread-stack-size.patch \
           file://musl-support/0013-include-asm-generic-ioctl.h-for-TCGETS2.patch \
           file://musl-support/0014-link-with-libexecinfo-on-musl.patch \
           file://musl-support/0015-metrics-Keep-GNU-extentions-effective-only-when-usin.patch \
           file://musl-support/0016-getcontext-API-is-unimplemented-in-musl.patch \
           file://musl-support/0017-Use-_fpstate-instead-of-_libc_fpstate.patch \
           file://musl-support/0018-tcmalloc-Use-off64_t-insread-of-__off64_t.patch \
"

# PACKAGECONFIG options
# ^^^^^^^^^^^^^^^^^^^^^
# * use-egl: (on by default)
#       Without this packageconfig, the Chromium build will use GLX for
#       creating an OpenGL context in X11, and regular OpenGL for painting
#       operations. Neither are desirable on embedded platforms. With this
#       packageconfig, EGL and OpenGL ES 2.x are used instead.
#
# * component-build: (off by default)
#       Enables component build mode. By default, all of Chromium (with the
#       exception of FFmpeg) is linked into one big binary. The linker step
#       requires at least 8 GB RAM. Component mode was created to facilitate
#       development and testing, since with it, there is not one big binary;
#       instead, each component is linked to a separate shared object. Use
#       component mode for development, testing, and in case the build machine
#       is not a 64-bit one, or has less than 8 GB RAM.
#
# * ignore-lost-context: (off by default)
#       There is a flaw in the HTML Canvas specification. When the canvas'
#       backing store is some kind of hardware resource like an OpenGL
#       texture, this resource might get lost. In case of OpenGL textures,
#       this happens when the OpenGL context gets lost. The canvas should then
#       be repainted, but nothing in the Canvas standard reflects that. This
#       packageconfig is to be used if the underlying OpenGL (ES) drivers do
#       not lose the context, or if losing the context is considered okay
#       (note that canvas contents can vanish then).
#
# * impl-side-painting: (off by default)
#       This is a new painting mechanism. Still in
#       development stages, it can improve performance See
#       http://www.chromium.org/developers/design-documents/impl-side-painting
#       for more.
#
# * kiosk-mode: (off by default)
#       Enable this option if you want your browser to start up full-screen,
#       without any menu bars, without any clutter, and without any initial
#       start-up indicators.
#
# * proprietary-codecs: (off by default)
#       Enable this option if you want to add support for additional proprietary
#       codecs, most notably MPEG standards (h.264, h.265, MP4, MP3, AAC, MPEG-2 ..)

PACKAGECONFIG ??= "use-egl"

# this makes sure the dependencies for the EGL mode are present; otherwise, the configure scripts
# automatically and silently fall back to GLX
PACKAGECONFIG[use-egl] = ",,virtual/egl virtual/libgles2"

# Empty PACKAGECONFIG options listed here to avoid warnings.
# The .bb file should use these to conditionally add patches
# and command-line switches (extra dependencies should not
# be necessary but are OK to add).
PACKAGECONFIG[component-build] = ""
PACKAGECONFIG[ignore-lost-context] = ""
PACKAGECONFIG[impl-side-painting] = ""
PACKAGECONFIG[kiosk-mode] = ""
PACKAGECONFIG[proprietary-codecs] = ""


CHROMIUM_EXTRA_ARGS ?= " \
        ${@bb.utils.contains('PACKAGECONFIG', 'use-egl', '--use-gl=egl', '', d)} \
        ${@bb.utils.contains('PACKAGECONFIG', 'ignore-lost-context', '--gpu-no-context-lost', '', d)} \
        ${@bb.utils.contains('PACKAGECONFIG', 'impl-side-painting', '--enable-gpu-rasterization --enable-impl-side-painting', '', d)} \
        ${@bb.utils.contains('PACKAGECONFIG', 'kiosk-mode', '--start-fullscreen --kiosk --no-first-run --incognito', '', d)} \
"


EXTRA_OEGYP = " \
	-Dangle_use_commit_id=0 \
	-Dclang=0 \
	-Dhost_clang=0 \
	-Ddisable_fatal_linker_warnings=1 \
	-Dwerror= \
	-Dv8_use_external_startup_data=0 \
	-Dlinux_use_bundled_gold=0 \
	-Dlinux_use_bundled_binutils=0 \
	-Duse_gconf=0 \
	-Duse_cups=0 \
	-Duse_pulseaudio=${@bb.utils.contains('DISTRO_FEATURES', 'pulseaudio', '1', '0', d)} \
	-I ${WORKDIR}/oe-defaults.gypi \
	-I ${WORKDIR}/include.gypi \
	${@bb.utils.contains('PACKAGECONFIG', 'component-build', '-Dcomponent=shared_library', '', d)} \
	${@bb.utils.contains('PACKAGECONFIG', 'proprietary-codecs', '-Dproprietary_codecs=1 -Dffmpeg_branding=Chrome', '', d)} \
	-Dlinux_use_gold_flags=${@bb.utils.contains('DISTRO_FEATURES', 'ld-is-gold', '1', '0', d)} \
	-f ninja \
"

# API keys for accessing Google services. By default, we use an invalid key
# only to prevent the "you are missing an API key" infobar from being shown on
# startup.
# See https://dev.chromium.org/developers/how-tos/api-keys for more information
# on how to obtain your own keys. You can then set the variables below in
# local.conf or a .bbappend file.
GOOGLE_API_KEY ??= "invalid-api-key"
GOOGLE_DEFAULT_CLIENT_ID ??= "invalid-client-id"
GOOGLE_DEFAULT_CLIENT_SECRET ??= "invalid-client-secret"
EXTRA_OEGYP += "\
        -Dgoogle_api_key=${GOOGLE_API_KEY} \
        -Dgoogle_default_client_id=${GOOGLE_DEFAULT_CLIENT_ID} \
        -Dgoogle_default_client_secret=${GOOGLE_DEFAULT_CLIENT_SECRET} \
"
